@mixin modifiers($map, $default-map: (), $prefix: '.-') {
    @each $pair in $map {
        $label: nth($pair, 1);
        $value: null;

        @if length($pair) > 1 {
            $value: nth($pair, 2);

        } @else if map-has-key($default-map, $label) {
            $value: map-get($default-map, $label);
        }

        @if $value != null {
            &#{$prefix}#{""+$label} {
                @content($value);
            }
        } @else {
            @content($label);
        }
    }
}

@mixin color-modifiers($colors: $color-modifiers, $prefix: '.-') {
    @if content-exists() {
        @include modifiers($colors, $color-modifiers, $prefix) using ($color) {
            @content($color);
        }
    } @else {
        @include modifiers($colors, $color-modifiers, $prefix) using ($color) {
            color: $color;
        }
    }
}


///
/// no-bullets mixin
///

@mixin no-bullets {
    list-style: none;
    margin: 0;
    padding-left: 0;

    li::before {
        display: none;
    }
}


///
/// Mixin for generating transitions. $properties can be a list of properties,
/// and it'll append duration and easing to each.
///

@mixin transition($properties: all, $duration: $fast, $easing: $ease-out-quint) {
    transition: append-each($properties, $duration $easing, comma);
}


///
/// Historical alias for at().
///

@mixin breakpoint($bp, $rule: min-width) {
    @include at($bp, $rule) {
        @content;
    }
}

///
/// Media query mixin. Includes content when matching the breakpoint $bp as
/// defined in $breakpoints. You can also just pass in a length to create a
/// one-off breakpoint. It's discouraged, but you can also override the rule
/// if you're prefer to use max-width instead of min-width.
///
@mixin at($bp, $rule: min-width) {
    @if map-has-key($breakpoints, $bp) {
        $bp: map-get($breakpoints, $bp);
    }
    @media screen and (#{$rule}: $bp) {
        @content;
    }
}

///
/// Alias for at-each() for those who prefer breakpoint().
///
@mixin each-breakpoint($map...) {
    @include at-each($map...) using ($v) {
        @content($v);
    }
}

///
/// Quick way to define a bunch of media queries. Example usage:
///
///     @include at-each(10px, md 20px, lg 30px) using ($margin) {
///         margin-top: $margin;
///     }
///
@mixin at-each($map...) {
    @each $bp, $arg in $map {
        @if $arg {
            @include at($bp) {
                @content($arg);
            }
        } @else {
            @content($bp);
        }
    }
}
